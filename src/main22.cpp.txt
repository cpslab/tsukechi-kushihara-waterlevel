// /*
//   *@File  : DFRobot_Distance_A02.ino 
//   *@Brief : This example use A02YYUW ultrasonic sensor to measure distance
//   *         With initialization completed, We can get distance value 
//   *@Copyright [DFRobot](https://www.dfrobot.com),2016         
//   *           GUN Lesser General Pulic License
//   *@version V1.0           
//   *@data  2019-8-28
// */
//#include <HardwareSerial.h>
#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>

unsigned char data[4] = {};
float distance;
int count;
HardwareSerial Serial1(0);

bool sendATCommand(const char* command) {
  Serial1.write(command);
  delay(5000);  // 応答を待つための適切な遅延を設定

  while (Serial1.available()) {
    char response = Serial1.read();
    Serial.print(response);

    // エラーチェック
    if (strstr(&response, "ERROR") != NULL) {
      return false;  // エラーが検出された場合
    }
  }

  return true;  // エラーがなかった場合
}

bool sendBody(const char* command) {
  Serial1.write("AT+SHBOD=1024,10000\r\n");
  delay(1000);  // timeoutがあるため短めに設定
  Serial1.write(command);
  while (Serial1.available()) {
    char response = Serial1.read();
    Serial.print(response);

    // エラーチェック
    if (strstr(&response, "ERROR") != NULL) {
      return false;  // エラーが検出された場合
    }
  }

  return true;  // エラーがなかった場合
}

// bool sendSIMNetworkATCommand(const char* command) {
//   Serial1.write(command);
//   delay(5000);  // 応答を待つための適切な遅延を設定
//   network_json = "";
//   while (Serial1.available()) {
//     char response = Serial1.read();
//     network_json += response;
//   }
//   // エラーチェック
//   if (network_json.indexOf("ERROR") != -1) {
//     Serial1.write(command);
//     delay(5000);  // 応答を待つための適切な遅延を設定
//     network_json = "";
//     while (Serial1.available()) {
//       char response = Serial1.read();
//       network_json += response;
//     }

//     network_json = "{\"network\":" + network_json + "}";
//     if (network_json.indexOf("ERROR") != -1) {
//       return false;  // エラーが検出された場合
//     }
//     return true;
//   }

//   // Serial.println(network_json);
//   network_json = "{\"network\":" + network_json + "}";
//   return true;  // エラーがなかった場合
// }

// bool sendSIMLocationATCommand(const char* command) {
//   Serial1.write(command);
//   delay(5000);  // 応答を待つための適切な遅延を設定
//   location_json = "";
//   while (Serial1.available()) {
//     char response = Serial1.read();
//     location_json += response;
//   }
//   // エラーチェック
//   if (location_json.indexOf("ERROR") != -1) {
//     Serial1.write(command);
//     delay(5000);  // 応答を待つための適切な遅延を設定
//     location_json = "";
//     while (Serial1.available()) {
//       char response = Serial1.read();
//       location_json += response;
//     }

//     location_json = "{\"location\":" + location_json + "}";
//     if (location_json.indexOf("ERROR") != -1) {
//       return false;  // エラーが検出された場合
//     }
//     return true;
//   }

  // Serial.println(location_json);
//   location_json = "{\"location\":" + location_json + "}";
//   return true;  // エラーがなかった場合
// }

 void serial_send(float distance) {
//   //GNSSPowerOn
//   if (!sendATCommand("AT+CGNSPWR=1\r\n")) {
//     Serial.println("Error: AT+CGNSPWR=1");
//     return;
//   }
//   delay(1000);

  // //通信品質取得
  // if (!sendSIMNetworkATCommand("AT+CPSI?\r\n")) {
  //   Serial.println("Error: AT+CPSI?");
  //   return;
  // }
  // delay(15000);

  // //SIMの現在地取得
  // if (!sendSIMLocationATCommand("AT+CGNSINF\r\n")) {
  //   Serial.println("Error: AT+CGNSINF");
  //   return;
  // }
  // delay(3000);

  // if (!sendATCommand("AT+CGNSPWR=0\r\n")) {
  //   Serial.println("Error: AT+CGNSPWR=1");
  //   return;
  // }
  // delay(1000);

  if (!sendATCommand("AT+CFUN=6\r\n")) {
    Serial.println("Error: AT+CFUN=6");
    return;
  }
  Serial.println("リセット");
  //リセットしてから長めにとる
  delay(6000);

  for (int i = 0; i <= 5; i++) {
    if (!sendATCommand("AT+CNACT=0,1\r\n")) {
      Serial.println("Error: AT+CNACT");
      return;
    }
    delay(1000);
  }

  if (!sendATCommand("AT+SHCONF=\"URL\",\"http://harvest.soracom.io\"\r\n")) {
    Serial.println("Error: AT+SHCONF URL");
    return;
  }
  delay(1000);

  if (!sendATCommand("AT+SHCONF=\"BODYLEN\",1024\r\n")) {
    Serial.println("Error: AT+SHCONF BODYLEN");
    return;
  }
  delay(1000);

  if (!sendATCommand("AT+SHCONF=\"HEADERLEN\",350\r\n")) {
    Serial.println("Error: AT+SHCONF HEADERLEN");
    return;
  }
  delay(1000);

  if (!sendATCommand("AT+SHCONN\r\n")) {
    Serial.println("Error: AT+SHCONN");
    return;
  }
  delay(3000);

  if (!sendATCommand("AT+SHAHEAD=\"Content-Type\",\"application/json\"\r\n")) {
    Serial.println("Error: AT+SHAHEAD");
    return;
  }
  delay(1000);

  if (!sendATCommand("AT+SHBOD=1024,10000\r\n")) {
    Serial.println("Error: AT+SHBOD");
    return;
  }
  //delay(1000);

  String distance_json = "\"distance\":" + String(distance);
  //String All_data = "{" + distance_json + "," + network_json + "," + location_json + "}";
  String All_data = "{" + distance_json +"}";
  Serial.println("ALL=data:"+All_data);
  if (!sendBody(All_data.c_str())) {
    Serial.println("Error: JSON Data");
    return;
  }

  delay(3000);

  if (!sendATCommand("AT+SHREQ=\"http://harvest.soracom.io\",3\r\n")) {
    Serial.println("Error: AT+SHREQ");
    return;
  }
  delay(1000);

  if (!sendATCommand("AT+SHDISC\r\n")) {
    Serial.println("Error: AT+SHDISC");
    return;
  }

  Serial.println("done");
}


void setup() {
  Serial.begin(115200);
  Serial1.begin(115200);
  // Configure Serial1 on pins TX=6 and RX=7 (-1, -1 means use the default)
  //Serial1.begin(115200, SERIAL_8N1, D0, D1);
  //Serial1.print("Serial1");
}

void loop() {
  Serial.println("start");
  delay(3000);
  Serial.println("stand by");
  serial_send(10);
  delay(15000);
}